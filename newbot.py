import telebot
from telebot import types
import os
import psycopg2
import time
from collections import defaultdict
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
YOUR_BOT_TOKEN = os.environ.get('YOUR_BOT_TOKEN')

# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if not YOUR_BOT_TOKEN:
    YOUR_BOT_TOKEN = "5679093544:AAEZgFeVu-lgPM00oP1kfaUduCJlpR2_Uug"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOUR_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–¥–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(YOUR_BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    DATABASE_URL = os.environ.get('DATABASE_URL')
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    return conn

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def create_tables():
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS quizzes (
            id SERIAL PRIMARY KEY,
            name VARCHAR NOT NULL,
            admin_id INT NOT NULL
        )
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id SERIAL PRIMARY KEY,
            quiz_id INT NOT NULL,
            question VARCHAR NOT NULL,
            answer VARCHAR NOT NULL,
            photo VARCHAR,
            FOREIGN KEY (quiz_id) REFERENCES quizzes (id) ON DELETE CASCADE
        )
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS results (
            id SERIAL PRIMARY KEY,
            quiz_id INT NOT NULL,
            user_id INT NOT NULL,
            username VARCHAR NOT NULL,
            score INT DEFAULT 0,
            FOREIGN KEY (quiz_id) REFERENCES quizzes (id) ON DELETE CASCADE
        )
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            id SERIAL PRIMARY KEY,
            user_id INT NOT NULL UNIQUE,
            username VARCHAR NOT NULL
        )
        ''')
        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    finally:
        conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def initialize_admin():
    conn = get_db_connection()
    cursor = conn.cursor()

    # –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID –∏ username
    admin_id = 881514562  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID
    admin_username = "mangata_al"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã –≤ —Ç–∞–±–ª–∏—Ü–µ admins
        cursor.execute("SELECT user_id FROM admins WHERE user_id = %s", (admin_id,))
        result = cursor.fetchone()

        # –ï—Å–ª–∏ –≤–∞—Å –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
        if not result:
            cursor.execute("INSERT INTO admins (user_id, username) VALUES (%s, %s)", (admin_id, admin_username))
            conn.commit()
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} (ID: {admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} (ID: {admin_id}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    finally:
        conn.close()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
create_tables()
initialize_admin()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
temp_data = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω
active_quizzes = defaultdict(dict)  # –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT user_id FROM admins WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        if result:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return True
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False
    finally:
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    if message.chat.type == "private":  # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º
        markup = types.InlineKeyboardMarkup()
        if is_admin(message.from_user.id):
            markup.add(types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="create_quiz"))
            markup.add(types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz"))
            markup.add(types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="edit_quiz"))
            markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="delete_quiz"))
            markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"))
            markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin"))
        else:
            markup.add(types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz"))
        markup.add(types.InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help"))
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π —á–∞—Ç
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz"))
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.callback_query_handler(func=lambda call: call.data == "help")
def help_command(call):
    markup = types.InlineKeyboardMarkup()
    if is_admin(call.from_user.id):
        markup.add(types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="create_quiz"))
        markup.add(types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz"))
        markup.add(types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="edit_quiz"))
        markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="delete_quiz"))
        markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"))
        markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin"))
    else:
        markup.add(types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz"))
    bot.send_message(call.message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:", reply_markup=markup)

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == "create_quiz")
def create_quiz(call):
    if is_admin(call.from_user.id):
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:")
        bot.register_next_step_handler(msg, process_quiz_name, call.from_user.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def process_quiz_name(message, user_id):
    quiz_name = message.text
    temp_data[user_id] = {'quiz_name': quiz_name, 'questions': []}
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_question"))
    markup.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_quiz"))
    markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.send_message(message.chat.id, f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ '{quiz_name}' —Å–æ–∑–¥–∞–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@bot.callback_query_handler(func=lambda call: call.data == "add_question")
def add_question(call):
    if is_admin(call.from_user.id):
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(msg, process_question, call.from_user.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def process_question(message, user_id):
    question = message.text
    temp_data[user_id]['questions'].append({'question': question, 'answer': None, 'photo': None})
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, process_answer, user_id)

def process_answer(message, user_id):
    answer = message.text
    temp_data[user_id]['questions'][-1]['answer'] = answer
    msg = bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –≤–æ–ø—Ä–æ—Å—É? (–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç')")
    bot.register_next_step_handler(msg, process_photo, user_id)

def process_photo(message, user_id):
    if message.photo:
        photo_id = message.photo[-1].file_id
        temp_data[user_id]['questions'][-1]['photo'] = photo_id
    else:
        temp_data[user_id]['questions'][-1]['photo'] = None

    question_data = temp_data[user_id]['questions'][-1]
    preview = f"üìù –í–æ–ø—Ä–æ—Å: {question_data['question']}\n‚úÖ –û—Ç–≤–µ—Ç: {question_data['answer']}"
    if question_data['photo']:
        bot.send_photo(message.chat.id, question_data['photo'], caption=preview)
    else:
        bot.send_message(message.chat.id, preview)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="add_question"))
    markup.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="finish_quiz"))
    markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.send_message(message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == "finish_quiz")
def finish_quiz(call):
    if is_admin(call.from_user.id):
        user_id = call.from_user.id
        quiz_name = temp_data[user_id]['quiz_name']
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO quizzes (name, admin_id) VALUES (%s, %s) RETURNING id", (quiz_name, user_id))
        quiz_id = cursor.fetchone()[0]

        for question in temp_data[user_id]['questions']:
            cursor.execute("INSERT INTO questions (quiz_id, question, answer, photo) VALUES (%s, %s, %s, %s)",
                          (quiz_id, question['question'], question['answer'], question['photo']))

        conn.commit()
        conn.close()
        bot.send_message(call.message.chat.id, f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ '{quiz_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        del temp_data[user_id]
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == "edit_quiz")
def edit_quiz(call):
    if is_admin(call.from_user.id):
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM quizzes WHERE admin_id = %s", (call.from_user.id,))
        quizzes = cursor.fetchall()
        conn.close()

        if not quizzes:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        markup = types.InlineKeyboardMarkup()
        for quiz in quizzes:
            markup.add(types.InlineKeyboardButton(text=quiz[1], callback_data=f"edit_quiz_{quiz[0]}"))
        markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_quiz_"))
def edit_quiz_questions(call):
    if is_admin(call.from_user.id):
        quiz_id = int(call.data.split("_")[2])
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, question FROM questions WHERE quiz_id = %s", (quiz_id,))
        questions = cursor.fetchall()
        conn.close()

        if not questions:
            bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        markup = types.InlineKeyboardMarkup()
        for question in questions:
            markup.add(types.InlineKeyboardButton(text=question[1], callback_data=f"edit_question_{question[0]}"))
        markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="edit_quiz"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_question_"))
def edit_question(call):
    if is_admin(call.from_user.id):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º question_id –∏–∑ call.data
        question_id = int(call.data.split("_")[2])
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT question, answer, photo, quiz_id FROM questions WHERE id = %s", (question_id,))
        question_data = cursor.fetchone()
        conn.close()

        if not question_data:
            bot.send_message(call.message.chat.id, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        question, answer, photo, quiz_id = question_data
        temp_data[call.from_user.id] = {
            'question_id': question_id,
            'question': question,
            'answer': answer,
            'photo': photo,
            'quiz_id': quiz_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º quiz_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        }

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", callback_data=f"edit_text_{question_id}"))
        markup.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"edit_answer_{question_id}"))
        markup.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{question_id}"))
        markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"edit_quiz_{quiz_id}"))  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤

        if photo:
            bot.send_photo(call.message.chat.id, photo, caption=f"üìù –í–æ–ø—Ä–æ—Å: {question}\n‚úÖ –û—Ç–≤–µ—Ç: {answer}", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, f"üìù –í–æ–ø—Ä–æ—Å: {question}\n‚úÖ –û—Ç–≤–µ—Ç: {answer}", reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_text_"))
def edit_question_text(call):
    if is_admin(call.from_user.id):
        question_id = int(call.data.split("_")[2])
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
        bot.register_next_step_handler(msg, process_edit_question_text, question_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def process_edit_question_text(message, question_id):
    new_question = message.text
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE questions SET question = %s WHERE id = %s", (new_question, question_id))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    edit_question(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_answer_"))
def edit_question_answer(call):
    if is_admin(call.from_user.id):
        question_id = int(call.data.split("_")[2])
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(msg, process_edit_question_answer, question_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def process_edit_question_answer(message, question_id):
    new_answer = message.text
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE questions SET answer = %s WHERE id = %s", (new_answer, question_id))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    edit_question(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_photo_"))
def edit_question_photo(call):
    if is_admin(call.from_user.id):
        question_id = int(call.data.split("_")[2])
        msg = bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ):")
        bot.register_next_step_handler(msg, process_edit_question_photo, question_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def process_edit_question_photo(message, question_id):
    if message.photo:
        new_photo = message.photo[-1].file_id
    else:
        new_photo = None

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE questions SET photo = %s WHERE id = %s", (new_photo, question_id))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
    edit_question(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == "delete_quiz")
def delete_quiz(call):
    if is_admin(call.from_user.id):
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM quizzes WHERE admin_id = %s", (call.from_user.id,))
        quizzes = cursor.fetchall()
        conn.close()

        if not quizzes:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        markup = types.InlineKeyboardMarkup()
        for quiz in quizzes:
            markup.add(types.InlineKeyboardButton(text=quiz[1], callback_data=f"delete_quiz_{quiz[0]}"))
        markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_quiz_"))
def process_delete_quiz(call):
    if is_admin(call.from_user.id):
        quiz_id = int(call.data.split("_")[2])
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM quizzes WHERE id = %s", (quiz_id,))
        conn.commit()
        conn.close()
        bot.send_message(call.message.chat.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data == "add_admin")
def add_admin(call):
    if is_admin(call.from_user.id):
        msg = bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.")
        bot.register_next_step_handler(msg, process_add_admin)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def process_add_admin(message):
    if not (message.forward_from or message.forward_from_chat):
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if message.forward_from:
        user_id = message.forward_from.id
        username = message.forward_from.username or message.forward_from.first_name
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT user_id FROM admins WHERE user_id = %s", (user_id,))
        if cursor.fetchone():
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
            return

        cursor.execute("INSERT INTO admins (user_id, username) VALUES (%s, %s)", (user_id, username))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞.")
    finally:
        conn.close()

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data == "remove_admin")
def remove_admin(call):
    if is_admin(call.from_user.id):
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT username FROM admins")
        admins = cursor.fetchall()
        conn.close()

        if not admins:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        markup = types.InlineKeyboardMarkup()
        for admin in admins:
            markup.add(types.InlineKeyboardButton(text=f"@{admin[0]}", callback_data=f"remove_admin_{admin[0]}"))
        markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_admin_"))
def process_remove_admin(call):
    if is_admin(call.from_user.id):
        username = call.data.split("_")[2]
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM admins WHERE username = %s", (username,))
        conn.commit()
        conn.close()
        bot.send_message(call.message.chat.id, f"–ê–¥–º–∏–Ω @{username} —É–¥–∞–ª–µ–Ω.")
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    start_command(call.message)

# –ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == "start_quiz")
def start_quiz(call):
    if is_admin(call.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM quizzes")
        quizzes = cursor.fetchall()
        conn.close()

        if not quizzes:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
            return

        markup = types.InlineKeyboardMarkup()
        for quiz in quizzes:
            markup.add(types.InlineKeyboardButton(text=quiz[1], callback_data=f"start_quiz_{quiz[0]}"))
        markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("start_quiz_"))
def process_start_quiz(call):
    quiz_id = int(call.data.split("_")[2])
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM quizzes WHERE id = %s", (quiz_id,))
    quiz_name = cursor.fetchone()[0]
    conn.close()

    active_quizzes[call.message.chat.id] = {
        'quiz_id': quiz_id,
        'current_question': 0,
        'scores': defaultdict(int),
        'current_answer': None
    }

    bot.send_message(call.message.chat.id, f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ '{quiz_name}' –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!")
    time.sleep(15)
    ask_question(call.message.chat.id, quiz_id)

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
def ask_question(chat_id, quiz_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT question, answer, photo FROM questions WHERE quiz_id = %s", (quiz_id,))
    questions = cursor.fetchall()
    conn.close()

    if not questions:
        bot.send_message(chat_id, "–í —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        end_quiz(chat_id, quiz_id)
        return

    current_question = active_quizzes[chat_id]['current_question']
    if current_question >= len(questions):
        end_quiz(chat_id, quiz_id)
        return

    question, answer, photo = questions[current_question]
    active_quizzes[chat_id]['current_answer'] = answer.lower()

    if photo:
        bot.send_photo(chat_id, photo, caption=f"‚ùì –í–æ–ø—Ä–æ—Å {current_question + 1}: {question}")
    else:
        bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {current_question + 1}: {question}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@bot.message_handler(func=lambda message: message.chat.id in active_quizzes)
def handle_answer(message):
    chat_id = message.chat.id

    if chat_id not in active_quizzes or 'current_answer' not in active_quizzes[chat_id]:
        bot.send_message(chat_id, "‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    user_answer = message.text.lower()
    correct_answer = active_quizzes[chat_id]['current_answer']

    if user_answer == correct_answer:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        active_quizzes[chat_id]['scores'][user_id] += 1
        bot.send_message(chat_id, f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! @{username} –ø–æ–ª—É—á–∞–µ—Ç –æ—á–∫–æ!")

        show_scores(chat_id)

        active_quizzes[chat_id]['current_question'] += 1
        time.sleep(5)
        ask_question(chat_id, active_quizzes[chat_id]['quiz_id'])

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
def show_scores(chat_id):
    scores = active_quizzes[chat_id]['scores']
    if not scores:
        return

    scoreboard = "üèÜ –¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    for user_id, score in scores.items():
        user = bot.get_chat_member(chat_id, user_id).user
        username = user.username or user.first_name
        scoreboard += f"üë§ @{username}: {score} –æ—á–∫–æ–≤\n"
    bot.send_message(chat_id, scoreboard)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def end_quiz(chat_id, quiz_id):
    scores = active_quizzes[chat_id]['scores']
    if not scores:
        bot.send_message(chat_id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    for user_id, score in scores.items():
        user = bot.get_chat_member(chat_id, user_id).user
        username = user.username or user.first_name
        cursor.execute("INSERT INTO results (quiz_id, user_id, username, score) VALUES (%s, %s, %s, %s)",
                       (quiz_id, user_id, username, score))
    conn.commit()
    conn.close()

    final_scoreboard = "üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    for user_id, score in scores.items():
        user = bot.get_chat_member(chat_id, user_id).user
        username = user.username or user.first_name
        final_scoreboard += f"üë§ @{username}: {score} –æ—á–∫–æ–≤\n"
    bot.send_message(chat_id, final_scoreboard)
    bot.send_message(chat_id, "üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

    del active_quizzes[chat_id]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_errors(message):
    try:
        bot.process_new_messages([message])
    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞: {ex}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    bot.polling(none_stop=True)
