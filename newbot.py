import telebot
from telebot import types
import os
import psycopg2
import time
from collections import defaultdict
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
YOUR_BOT_TOKEN = os.environ.get('YOUR_BOT_TOKEN')

# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if not YOUR_BOT_TOKEN:
    YOUR_BOT_TOKEN = "5679093544:AAEZgFeVu-lgPM00oP1kfaUduCJlpR2_Uug"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOUR_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–¥–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(YOUR_BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    DATABASE_URL = os.environ.get('DATABASE_URL')
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    return conn

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def create_tables():
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            id SERIAL PRIMARY KEY,
            user_id INT NOT NULL UNIQUE,
            username VARCHAR NOT NULL
        )
        ''')
        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ admins —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã admins: {e}")
    finally:
        conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def initialize_admin():
    conn = get_db_connection()
    cursor = conn.cursor()

    # –í–∞—à ID –∏ username
    admin_id = 881514562  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID
    admin_username = "mangata_al"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã –≤ —Ç–∞–±–ª–∏—Ü–µ admins
        cursor.execute("SELECT user_id FROM admins WHERE user_id = %s", (admin_id,))
        result = cursor.fetchone()

        # –ï—Å–ª–∏ –≤–∞—Å –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
        if not result:
            cursor.execute("INSERT INTO admins (user_id, username) VALUES (%s, %s)", (admin_id, admin_username))
            conn.commit()
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} (ID: {admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} (ID: {admin_id}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    finally:
        conn.close()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
create_tables()
initialize_admin()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
temp_data = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω
active_quizzes = defaultdict(dict)  # –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT user_id FROM admins WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        if result:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return True
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False
    finally:
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /id
@bot.message_handler(commands=['id'])
def get_user_id(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id, f"–í–∞—à ID: {user_id}")

# –ö–æ–º–∞–Ω–¥–∞ /check_admin
@bot.message_handler(commands=['check_admin'])
def check_admin(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        bot.send_message(message.chat.id, "‚úÖ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")


# –ö–æ–º–∞–Ω–¥–∞ /help
def help_command(message):
    if is_admin(message.from_user.id):
        commands = """
üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
/add_quiz - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
/delete_quiz - –£–¥–∞–ª–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
/start_quiz - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ –æ–±—â–µ–º —á–∞—Ç–µ
/admin_commands - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""
    else:
        commands = """
üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
/start_quiz - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""
    bot.send_message(message.chat.id, commands)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="create_quiz"))
    markup.add(types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz"))
    markup.add(types.InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "create_quiz":
        create_quiz(call.message)
    elif call.data == "start_quiz":
        start_quiz(call.message)
    elif call.data == "help":
        help_command(call.message)
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –∑–¥–µ—Å—å

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def create_quiz(message):
    if is_admin(message.from_user.id):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:")
        bot.register_next_step_handler(msg, process_quiz_name)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def process_quiz_name(message):
    quiz_name = message.text
    temp_data[message.from_user.id] = {'quiz_name': quiz_name, 'questions': []}
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_question"))
    markup.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_quiz"))
    bot.send_message(message.chat.id, f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ '{quiz_name}' —Å–æ–∑–¥–∞–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@bot.callback_query_handler(func=lambda call: call.data == "add_question")
def add_question(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, process_question)

def process_question(message):
    question = message.text
    temp_data[message.from_user.id]['questions'].append({'question': question, 'answer': None, 'photo': None})
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, process_answer)

def process_answer(message):
    answer = message.text
    user_id = message.from_user.id
    temp_data[user_id]['questions'][-1]['answer'] = answer
    msg = bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –≤–æ–ø—Ä–æ—Å—É? (–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç')")
    bot.register_next_step_handler(msg, process_photo)

def process_photo(message):
    user_id = message.from_user.id
    if message.photo:
        photo_id = message.photo[-1].file_id
        temp_data[user_id]['questions'][-1]['photo'] = photo_id
    else:
        temp_data[user_id]['questions'][-1]['photo'] = None

    question_data = temp_data[user_id]['questions'][-1]
    preview = f"üìù –í–æ–ø—Ä–æ—Å: {question_data['question']}\n‚úÖ –û—Ç–≤–µ—Ç: {question_data['answer']}"
    if question_data['photo']:
        bot.send_photo(message.chat.id, question_data['photo'], caption=preview)
    else:
        bot.send_message(message.chat.id, preview)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="add_question"))
    markup.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="finish_quiz"))
    bot.send_message(message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == "finish_quiz")
def finish_quiz(call):
    user_id = call.from_user.id
    quiz_name = temp_data[user_id]['quiz_name']
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO quizzes (name, admin_id) VALUES (%s, %s) RETURNING id", (quiz_name, user_id))
    quiz_id = cursor.fetchone()[0]

    for question in temp_data[user_id]['questions']:
        cursor.execute("INSERT INTO questions (quiz_id, question, answer, photo) VALUES (%s, %s, %s, %s)",
                       (quiz_id, question['question'], question['answer'], question['photo']))

    conn.commit()
    conn.close()
    bot.send_message(call.message.chat.id, f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ '{quiz_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    del temp_data[user_id]

# –ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def start_quiz(message):
    if is_admin(message.from_user.id):
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM quizzes")
        quizzes = cursor.fetchall()
        conn.close()

        if not quizzes:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
            return

        markup = types.InlineKeyboardMarkup()
        for quiz in quizzes:
            markup.add(types.InlineKeyboardButton(text=quiz[1], callback_data=f"start_quiz_{quiz[0]}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("start_quiz_"))
def process_start_quiz(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        return

    quiz_id = int(call.data.split("_")[2])
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM quizzes WHERE id = %s", (quiz_id,))
    quiz_name = cursor.fetchone()[0]
    conn.close()

    active_quizzes[call.message.chat.id] = {
        'quiz_id': quiz_id,
        'current_question': 0,
        'scores': defaultdict(int),
        'current_answer': None
    }

    bot.send_message(call.message.chat.id, f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ '{quiz_name}' –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!")
    time.sleep(15)
    ask_question(call.message.chat.id, quiz_id)

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
def ask_question(chat_id, quiz_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT question, answer, photo FROM questions WHERE quiz_id = %s", (quiz_id,))
    questions = cursor.fetchall()
    conn.close()

    if not questions:
        bot.send_message(chat_id, "–í —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        end_quiz(chat_id, quiz_id)
        return

    current_question = active_quizzes[chat_id]['current_question']
    if current_question >= len(questions):
        end_quiz(chat_id, quiz_id)
        return

    question, answer, photo = questions[current_question]
    active_quizzes[chat_id]['current_answer'] = answer.lower()

    if photo:
        bot.send_photo(chat_id, photo, caption=f"‚ùì –í–æ–ø—Ä–æ—Å {current_question + 1}: {question}")
    else:
        bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {current_question + 1}: {question}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@bot.message_handler(func=lambda message: message.chat.id in active_quizzes)
def handle_answer(message):
    chat_id = message.chat.id

    if chat_id not in active_quizzes or 'current_answer' not in active_quizzes[chat_id]:
        bot.send_message(chat_id, "‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    user_answer = message.text.lower()
    correct_answer = active_quizzes[chat_id]['current_answer']

    if user_answer == correct_answer:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        active_quizzes[chat_id]['scores'][user_id] += 1
        bot.send_message(chat_id, f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! @{username} –ø–æ–ª—É—á–∞–µ—Ç –æ—á–∫–æ!")

        show_scores(chat_id)

        active_quizzes[chat_id]['current_question'] += 1
        time.sleep(5)
        ask_question(chat_id, active_quizzes[chat_id]['quiz_id'])

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
def show_scores(chat_id):
    scores = active_quizzes[chat_id]['scores']
    if not scores:
        return

    scoreboard = "üèÜ –¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    for user_id, score in scores.items():
        user = bot.get_chat_member(chat_id, user_id).user
        username = user.username or user.first_name
        scoreboard += f"üë§ @{username}: {score} –æ—á–∫–æ–≤\n"
    bot.send_message(chat_id, scoreboard)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def end_quiz(chat_id, quiz_id):
    scores = active_quizzes[chat_id]['scores']
    if not scores:
        bot.send_message(chat_id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    for user_id, score in scores.items():
        user = bot.get_chat_member(chat_id, user_id).user
        username = user.username or user.first_name
        cursor.execute("INSERT INTO results (quiz_id, user_id, username, score) VALUES (%s, %s, %s, %s)",
                       (quiz_id, user_id, username, score))
    conn.commit()
    conn.close()

    final_scoreboard = "üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    for user_id, score in scores.items():
        user = bot.get_chat_member(chat_id, user_id).user
        username = user.username or user.first_name
        final_scoreboard += f"üë§ @{username}: {score} –æ—á–∫–æ–≤\n"
    bot.send_message(chat_id, final_scoreboard)
    bot.send_message(chat_id, "üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

    del active_quizzes[chat_id]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_errors(message):
    try:
        bot.process_new_messages([message])
    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞: {ex}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    bot.polling(none_stop=True)
